package it.barcaioli.webserver.user;

import java.util.Optional;

import org.springframework.http.HttpStatus;
import org.springframework.security.crypto.bcrypt.BCrypt;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

@Service //A @Component more specific
public class UserService {

	private final UserData customerData;

	public UserService(UserData customer){
    	this.customerData = customer;
    }

	public Iterable<User> getCustomers() {
    	//findAll() it's auto generated by SpringBoot
        return customerData.findAll();
    }
    
	public User getCustomer(Long id) {
    	//findById() it's auto generated by SpringBoot
		Optional<User> customer = customerData.findById(id);
		
		if (!customer.isPresent())
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Customer doesn't exist");
		
		return customer.get();
    }
	
	private User getCustomerByEmail(String email) {
		Iterable<User> customers = customerData.findAll();
		 
        for (User customer : customers) {
            if (customer.getEmail().equalsIgnoreCase(email)) {
            	return customer;
            }
        }
        return null;
	}

	public User signUp(User newCustomer) {
		User customer = getCustomerByEmail(newCustomer.getEmail());
		
		if (customer!=null)
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Customer already exists");
		
		//Hash the password for the first time, with a randomly-generated salt
		String hashed = BCrypt.hashpw(newCustomer.getPassword(), BCrypt.gensalt());
		newCustomer.setPassword(hashed);
		
		return customerData.save(newCustomer);
    }
	
	public User login(User logginCustomer) {
		
		User customer = getCustomerByEmail(logginCustomer.getEmail());
		
		if (customer==null)
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Customer email not found");
		
    	if (BCrypt.checkpw(logginCustomer.getPassword(), customer.getPassword())) {
    		if (customer.isLoggedIn()) {
    			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User is already logged in");
    		}
    		customer.setLoggedIn(true);
            return customerData.save(customer);
        } else {
        	throw new ResponseStatusException(HttpStatus.UNAUTHORIZED, "Password not correct");
        }
	}
	
	public User logout(User logginOutCustomer) {
		User customer = getCustomerByEmail(logginOutCustomer.getEmail());
		
		if (customer==null)
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Customer email not found");
		
    	if (customer.isLoggedIn()){
    		customer.setLoggedIn(false);
            return customerData.save(customer);
        } else {
        	throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "User is not logged in");
        }
	}

	public void deleteCustomer(Long id) {
		Optional<User> customerToDelete = customerData.findById(id);
		
		if (!customerToDelete.isPresent())
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No customer to delete");
		
        //delete() it's auto generated by SpringBoot
        customerData.delete(customerToDelete.get());
    }
}
