package it.barcaioli.webserver.booking;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

@Service // A @Component more specific
public class BookingService {

  private final BookingRepository bookingRepository;

  @Autowired
  public BookingService(BookingRepository booking) {
    this.bookingRepository = booking;
  }

  public List<Booking> getBookings() {
    // findAll() it's auto generated by SpringBoot
    return bookingRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
  }

  public Booking getBooking(Long id) {
    // findById() it's auto generated by SpringBoot
    Optional<Booking> booking = bookingRepository.findById(id);

    if (!booking.isPresent())
      throw new ResponseStatusException(HttpStatus.NOT_FOUND, "Booking doesn't exist");

    return booking.get();
  }

  public Booking createBooking(Booking newBooking) {
    // save() it's auto generated by SpringBoot
    return bookingRepository.save(newBooking);
  }

  public Booking updateBooking(Long id, Booking booking) {
    Optional<Booking> bookingToUpdate = bookingRepository.findById(id);

    if (!bookingToUpdate.isPresent())
      throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No booking to update");

    Booking bookingFound = bookingToUpdate.get();

    bookingFound.setNumPeople(booking.getNumPeople());
    bookingFound.setBoat(booking.getBoat());
    bookingFound.setUser(booking.getUser());
    bookingFound.setTrip(booking.getTrip());

    return bookingRepository.save(bookingFound);
  }

  public void deleteBooking(Long id) {
    Optional<Booking> bookingToDelete = bookingRepository.findById(id);

    if (!bookingToDelete.isPresent())
      throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No booking to delete");

    // delete() it's auto generated by SpringBoot
    bookingRepository.delete(bookingToDelete.get());
  }
}
