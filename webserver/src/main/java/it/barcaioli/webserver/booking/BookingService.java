package it.barcaioli.webserver.booking;

import java.util.List;
import java.util.Optional;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.domain.Sort;
import org.springframework.http.HttpStatus;
import org.springframework.stereotype.Service;
import org.springframework.web.server.ResponseStatusException;

import it.barcaioli.webserver.boat.Boat;
import it.barcaioli.webserver.boat.BoatService;
import it.barcaioli.webserver.trip.Trip;
import it.barcaioli.webserver.trip.TripService;
import it.barcaioli.webserver.user.User;
import it.barcaioli.webserver.user.UserService;

@Service // A @Component more specific
public class BookingService {

	private final BookingRepository bookingRepository;
	private final UserService userService;
	private final TripService tripService;
	private final BoatService boatService;

	@Autowired
	public BookingService(BookingRepository bookingRepository, UserService userService, TripService tripService,
			BoatService boatService) {
		this.bookingRepository = bookingRepository;
		this.userService = userService;
		this.tripService = tripService;
		this.boatService = boatService;
	}

	public List<Booking> getBookings() {
		// findAll() it's auto generated by SpringBoot
		return bookingRepository.findAll(Sort.by(Sort.Direction.ASC, "id"));
	}

	public Booking getBooking(Long id) {
		// findById() it's auto generated by SpringBoot
		Optional<Booking> booking = bookingRepository.findById(id);

		if (!booking.isPresent())
			throw new ResponseStatusException(HttpStatus.BAD_REQUEST, "Booking doesn't exist");

		return booking.get();
	}

	public Booking createBooking(Booking booking) {
		User user = userService.getUser(booking.getUserId());
		Trip trip = tripService.getTrip(booking.getTripId());

		// TODO assegnare barca

		return bookingRepository.save(booking);
	}

	public Booking updateBooking(Long id, Booking booking) {
		Optional<Booking> bookingToUpdate = bookingRepository.findById(id);

		if (!bookingToUpdate.isPresent())
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No booking to update");

		Booking bookingFound = bookingToUpdate.get();

		bookingFound.setNumPeople(booking.getNumPeople());
		bookingFound.setUserId(booking.getUserId());
		bookingFound.setTripId(booking.getTripId());
		bookingFound.setBoatId(booking.getBoatId());
		return bookingRepository.save(bookingFound);
	}

	public void deleteBooking(Long id) {
		Optional<Booking> bookingToDelete = bookingRepository.findById(id);

		if (!bookingToDelete.isPresent())
			throw new ResponseStatusException(HttpStatus.NOT_FOUND, "No booking to delete");

		// delete() it's auto generated by SpringBoot
		bookingRepository.delete(bookingToDelete.get());
	}
}
